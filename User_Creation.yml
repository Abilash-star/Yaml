---
- name: Group servers with inventory file and create user profiles as per the requirement 
  hosts: all
  become: true
  vars:
    sshd_key_copy: "{{ lookup('file', /home/automation/plays/setup.j2 }}"
    supp_grp: 
       name: "Adding multiple supplementary group names or can be dynamically retrieved"  
  vars_files:
    - "{{ /home/automation/plays/secret.yml }}"
    - "{{ /home/automation/plays/vars/user_list.yml }}"
   
  tasks:
    - name: Pull data for users with ID 1
      user: 
        name: "{{ item.username }}"
        password: "{{ user_password | password_hash('sha512') }}"
        shell: /bin/bash
        group: "{{ item.name }}"
        update_password: on_create
        groups: sudo
        append: yes
        generate_ssh_key: yes
        ssh_key_type: ed21
      with_items: 
         - "{{ users }}" 
         - "{{ supp_grp }}"   
      when: inventory_hostname in groups['Webserver'] and item.uid is search(1*)
      
    - authorized_key:
        user: "{{ item.username }}"
        state: present
        manage_dir: yes
        key: "{{ lookup('file', '/home/~/.ssh/id_ed21.pub') }}"
      with_items: 
         - "{{ users }}"    
      when: inventory_hostname in groups['Webserver'] and item.uid is search(1*)
  
    - name: Pull data for users with ID 2
      user: 
        name: "{{ item.username }}"
        password: "{{ user_password | password_hash('sha512') }}"
        shell: /bin/bash
        group: "{{ item.name }}"
        update_password: on_create
        groups: sudo
        append: yes
        generate_ssh_key: yes
        ssh_key_type: ed21
      with_items: 
         - "{{ users }}" 
         - "{{ supp_grp }}"
      when: inventory_hostname in groups['DBserver'] and item.uid is search(2*)

    - authorized_key:
       user: "{{ item.username }}"
       state: present
       manage_dir: yes
       key: "{{ lookup('file', '/home/~/.ssh/id_ed21.pub') }}"
       with_items: 
         - "{{ users }}"      
       when: inventory_hostname in groups['DBserver'] and item.uid is search(2*)
      

    - template:
        src: "{{ sshd_key_copy }}"
        dest: /etc/ssh/sshd_config
        owner: root
        mode: '0600'
        validate: /usr/sbin/sshd -t -f %s
        backup: yes

    -  name: restart ssh service
       service:
         name: sshd
         state: restarted
